# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_ctrl_extras.template $
# $Revision: #2 $
# $DateTime: 2012/03/22 11:20:44 $
# $Author: cliftm $
#
# Description
# Template file for controller extra commands/readbacks, that are additional to motor Record functionality
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# cliftm@ansto.gov.au
# 800 Blackburn Road, Clayton, Victoria 3168, Australia.
#

record(stringin,"$(P)DRIVER_MON")
{
	field(DESC, "Driver version")
	field(DTYP, "asynOctetRead")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_DRIVER")
}

record(stringin,"$(P)MODEL_MON")
{
	field(DESC, "Ctrl model")
	field(DTYP, "asynOctetRead")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_MODEL")
}

record(stringin,"$(P)ADDRESS_MON")
{
	field(DESC, "Ctrl address")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_ADDRESS")
}

record(stringin,"$(P)ETHADDR_MON")
{
	field(DESC, "Ctrl Ethernet address")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_ETHADDR")
}

record(stringin,"$(P)SERIALNUM_MON")
{
	field(DESC, "Ctrl Serial Number")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_SERIALNUM")
}

record(bi,"$(P)COMMERR_STATUS")
{
	field(DESC, "Comm err")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ONAM, "Error")
   	field(OSV,  "MAJOR")
  	field(ZNAM, "OK")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_COMMERR")
}

#Defered moves support
record(bi,"$(P)DEFER_STATUS")
{
	field(DESC, "Deferred moves")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(ONAM, "Defer")
   	field(OSV,  "NO_ALARM")
  	field(ZNAM, "Go")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)MOTOR_DEFER_MOVES")
}

record(bo,"$(P)DEFER_CMD")
{
	field(DESC, "Deferred moves")
	field(DTYP, "asynInt32")
	field(ZNAM, "Go")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Defer")
	field(OSV,  "NO_ALARM")
	field(OUT,  "@asyn($(PORT),0)MOTOR_DEFER_MOVES")
	field(FLNK, "$(P)DEFER_STATUS")
}

#Controller message records
record(waveform,"$(P)ERROR_MON")
{
	field(SCAN, "I/O Intr")
	field(DESC, "Controller error")
	field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(INP,  "@asyn($(PORT),0)CONTROLLER_ERROR")
}

#end
